Index: app/src/main/java/com/taltech/ee/finalproject/MapsActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.taltech.ee.finalproject\r\n\r\nimport android.Manifest\r\nimport android.annotation.SuppressLint\r\nimport android.content.pm.PackageManager\r\nimport android.graphics.Color\r\nimport android.location.Location\r\nimport android.os.Bundle\r\nimport android.os.Handler\r\nimport android.os.Looper\r\nimport android.util.Log\r\nimport android.view.LayoutInflater\r\nimport android.widget.Button\r\nimport android.widget.PopupWindow\r\nimport android.widget.TextView\r\nimport android.widget.Toast\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.constraintlayout.widget.ConstraintLayout\r\nimport androidx.core.app.ActivityCompat\r\nimport com.google.android.gms.location.*\r\nimport com.google.android.gms.maps.CameraUpdateFactory\r\nimport com.google.android.gms.maps.GoogleMap\r\nimport com.google.android.gms.maps.OnMapReadyCallback\r\nimport com.google.android.gms.maps.SupportMapFragment\r\nimport com.google.android.gms.maps.model.LatLng\r\nimport com.google.android.gms.maps.model.MarkerOptions\r\nimport com.google.android.gms.maps.model.Polyline\r\nimport com.google.android.gms.maps.model.PolylineOptions\r\n\r\nclass MapsActivity : AppCompatActivity(), OnMapReadyCallback {\r\n\r\n    private lateinit var mMap: GoogleMap\r\n    private lateinit var mFusedLocationClient: FusedLocationProviderClient\r\n    private var mLocationCallback: LocationCallback? = null\r\n    private val TAG = \"MapsActivity\"\r\n    private var mPolyline: Polyline? = null\r\n    private var isTracking = false\r\n\r\n    private var startLocation: Location? = null\r\n\r\n    // Variables for time tracking\r\n    private var startTime: Long = 0\r\n    private var elapsedTimeHandler = Handler(Looper.getMainLooper())\r\n\r\n    // The desired intervals for location updates\r\n    private val UPDATE_INTERVAL_IN_MILLISECONDS: Long = 2000\r\n    private val FASTEST_UPDATE_INTERVAL_IN_MILLISECONDS = UPDATE_INTERVAL_IN_MILLISECONDS / 2\r\n\r\n    // UI elements\r\n    private lateinit var startStopButton: Button\r\n    private lateinit var timeElapsedTextView: TextView\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_main)\r\n\r\n        // Obtain the SupportMapFragment and get notified when the map is ready to be used.\r\n        val mapFragment = supportFragmentManager\r\n            .findFragmentById(R.id.map) as SupportMapFragment\r\n        mapFragment.getMapAsync(this)\r\n\r\n        // Initialize FusedLocationClient\r\n        mFusedLocationClient = LocationServices.getFusedLocationProviderClient(this)\r\n\r\n        // Initialize the Start/Stop button and time text view\r\n        startStopButton = findViewById(R.id.start_stop_button)\r\n        timeElapsedTextView = findViewById(R.id.time_elapsed_start)\r\n\r\n        startStopButton.setOnClickListener {\r\n            if (isTracking) {\r\n                stopTracking()\r\n            } else {\r\n                startTracking()\r\n            }\r\n        }\r\n\r\n        // Create LocationRequest\r\n        createLocationRequest()\r\n\r\n        // Set up location callback to receive location updates\r\n        mLocationCallback = object : LocationCallback() {\r\n            override fun onLocationResult(locationResult: LocationResult) {\r\n                super.onLocationResult(locationResult)\r\n                locationResult.lastLocation?.let { onNewLocation(it) }\r\n            }\r\n        }\r\n\r\n        // Check and request permissions if necessary\r\n        if (ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION)\r\n            != PackageManager.PERMISSION_GRANTED\r\n        ) {\r\n            ActivityCompat.requestPermissions(\r\n                this,\r\n                arrayOf(Manifest.permission.ACCESS_FINE_LOCATION),\r\n                1001 // Request code for location permission\r\n            )\r\n        }\r\n\r\n        startStopButton.setOnClickListener {\r\n            if (startStopButton.text == \"Stop\") {\r\n                showPopupWindow()\r\n            } else {\r\n                startTracking()\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    private fun showPopupWindow() {\r\n        val inflater = LayoutInflater.from(this)\r\n        val popupView = inflater.inflate(R.layout.popup_window, null)\r\n\r\n        val popupWindow = PopupWindow(\r\n            popupView,\r\n            ConstraintLayout.LayoutParams.WRAP_CONTENT,\r\n            ConstraintLayout.LayoutParams.WRAP_CONTENT,\r\n            true\r\n        )\r\n\r\n        val noButton = popupView.findViewById<Button>(R.id.no_button)\r\n        val yesButton = popupView.findViewById<Button>(R.id.yes_button)\r\n\r\n        noButton.setOnClickListener {\r\n            popupWindow.dismiss()\r\n        }\r\n\r\n        yesButton.setOnClickListener {\r\n            stopTracking()\r\n            popupWindow.dismiss()\r\n        }\r\n\r\n        popupWindow.showAtLocation(\r\n            findViewById(R.id.map),  // root layout to anchor the popup\r\n            android.view.Gravity.CENTER,  // Center the popup\r\n            0, 0  // offset position (0, 0 means centered)\r\n        )\r\n    }\r\n\r\n\r\n\r\n    override fun onMapReady(googleMap: GoogleMap) {\r\n        mMap = googleMap\r\n\r\n        mMap.uiSettings.isCompassEnabled = false\r\n\r\n        // Move camera to default location (example: Sydney) when map is ready\r\n//        val location = LatLng(59.39487859716227, 24.67152136890696)\r\n        val location = LatLng(0.0,0.0)\r\n        mMap.addMarker(MarkerOptions().position(location).title(\"Marker in TalTech\"))\r\n        mMap.moveCamera(CameraUpdateFactory.newLatLng(location))\r\n\r\n        // Start location updates when the map is ready\r\n        startLocationUpdates()\r\n    }\r\n\r\n    // Create location request for regular updates\r\n    private fun createLocationRequest() {\r\n        val mLocationRequest = LocationRequest.create().apply {\r\n            interval = UPDATE_INTERVAL_IN_MILLISECONDS\r\n            fastestInterval = FASTEST_UPDATE_INTERVAL_IN_MILLISECONDS\r\n            priority = LocationRequest.PRIORITY_HIGH_ACCURACY\r\n        }\r\n    }\r\n\r\n    // Start location updates\r\n    private fun startLocationUpdates() {\r\n        try {\r\n            if (ActivityCompat.checkSelfPermission(\r\n                    this,\r\n                    Manifest.permission.ACCESS_FINE_LOCATION\r\n                ) != PackageManager.PERMISSION_GRANTED\r\n            ) {\r\n                return\r\n            }\r\n            mFusedLocationClient.requestLocationUpdates(\r\n                LocationRequest.create(),\r\n                mLocationCallback!!,\r\n                mainLooper\r\n            )\r\n        } catch (unlikely: SecurityException) {\r\n            Log.e(TAG, \"Lost location permission. Could not request updates.\", unlikely)\r\n        }\r\n    }\r\n\r\n    // Stop location updates when activity is paused or destroyed\r\n    override fun onPause() {\r\n        super.onPause()\r\n        stopLocationUpdates()\r\n    }\r\n\r\n    override fun onResume() {\r\n        super.onResume()\r\n        if (isTracking) {\r\n            startLocationUpdates()\r\n        }\r\n    }\r\n\r\n    private fun stopLocationUpdates() {\r\n        mFusedLocationClient.removeLocationUpdates(mLocationCallback!!)\r\n    }\r\n\r\n    private fun onNewLocation(location: Location) {\r\n        Log.i(TAG, \"New location: $location\")\r\n\r\n        val latLng = LatLng(location.latitude, location.longitude)\r\n\r\n        if (mPolyline == null) {\r\n            // Initialize the polyline if it doesn't exist\r\n            val polylineOptions = PolylineOptions().color(Color.BLUE).width(5f)\r\n            mPolyline = mMap.addPolyline(polylineOptions)\r\n        }\r\n\r\n        val points = mPolyline?.points\r\n        points?.add(latLng)\r\n        mPolyline?.points = points!!\r\n\r\n        mMap.moveCamera(CameraUpdateFactory.newLatLng(latLng))\r\n\r\n        mMap.addMarker(MarkerOptions().position(latLng).title(\"You are here\"))\r\n    }\r\n\r\n    @SuppressLint(\"MissingPermission\")\r\n    private fun startTracking() {\r\n        isTracking = true\r\n        startStopButton.text = \"Stop\"\r\n        startTime = System.currentTimeMillis()\r\n        elapsedTimeHandler.postDelayed(updateElapsedTimeRunnable, 1000)\r\n\r\n        mFusedLocationClient.lastLocation.addOnSuccessListener { location ->\r\n            if (location != null) {\r\n                startLocation = location\r\n                Log.i(TAG, \"Starting location: $startLocation\")\r\n            }\r\n        }\r\n\r\n\r\n        startLocationUpdates()\r\n    }\r\n\r\n    private fun stopTracking() {\r\n        isTracking = false\r\n        startStopButton.text = \"Start\"\r\n        elapsedTimeHandler.removeCallbacks(updateElapsedTimeRunnable)\r\n        stopLocationUpdates()\r\n    }\r\n\r\n    private val updateElapsedTimeRunnable = object : Runnable {\r\n        override fun run() {\r\n            if (isTracking) {\r\n                val elapsedMillis = System.currentTimeMillis() - startTime\r\n                val seconds = (elapsedMillis / 1000) % 60\r\n                val minutes = (elapsedMillis / (1000 * 60)) % 60\r\n                val hours = (elapsedMillis / (1000 * 60 * 60)) % 24\r\n\r\n                val timeFormatted = String.format(\"%02d:%02d:%02d\", hours, minutes, seconds)\r\n\r\n                timeElapsedTextView.text = timeFormatted\r\n\r\n                elapsedTimeHandler.postDelayed(this, 1000)\r\n            }\r\n        }\r\n    }\r\n\r\n    override fun onRequestPermissionsResult(\r\n        requestCode: Int,\r\n        permissions: Array<out String>,\r\n        grantResults: IntArray\r\n    ) {\r\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults)\r\n        if (requestCode == 1001) {\r\n            if (grantResults.isNotEmpty() && grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r\n                startLocationUpdates()\r\n            } else {\r\n                Toast.makeText(this, \"Permission Denied!\", Toast.LENGTH_SHORT).show()\r\n            }\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/taltech/ee/finalproject/MapsActivity.kt b/app/src/main/java/com/taltech/ee/finalproject/MapsActivity.kt
--- a/app/src/main/java/com/taltech/ee/finalproject/MapsActivity.kt	
+++ b/app/src/main/java/com/taltech/ee/finalproject/MapsActivity.kt	
@@ -37,6 +37,8 @@
     private var isTracking = false
 
     private var startLocation: Location? = null
+    private lateinit var mLocationRequest: LocationRequest
+
 
     // Variables for time tracking
     private var startTime: Long = 0
@@ -155,9 +157,9 @@
 
     // Create location request for regular updates
     private fun createLocationRequest() {
-        val mLocationRequest = LocationRequest.create().apply {
-            interval = UPDATE_INTERVAL_IN_MILLISECONDS
-            fastestInterval = FASTEST_UPDATE_INTERVAL_IN_MILLISECONDS
+        mLocationRequest = LocationRequest.create().apply {
+            interval = UPDATE_INTERVAL_IN_MILLISECONDS // 2000 milliseconds
+            fastestInterval = FASTEST_UPDATE_INTERVAL_IN_MILLISECONDS // Half the interval (1000 milliseconds)
             priority = LocationRequest.PRIORITY_HIGH_ACCURACY
         }
     }
@@ -173,7 +175,7 @@
                 return
             }
             mFusedLocationClient.requestLocationUpdates(
-                LocationRequest.create(),
+                mLocationRequest, // Correctly use the location request created above
                 mLocationCallback!!,
                 mainLooper
             )
